image: docker.cern.ch/linuxsupport/cc7-base:latest

stages:
    - prepare
    - hstep
    - cleanup

before_script:
   - yum -y install man gcc make
   - set +e
   - source setup.sh
   - which root
   - which make
   - ls

compile:
    stage: prepare
    tags:
      - cvmfs
    script:
      - make clean
      - make > make.log 2>&1
      - make clean
    artifacts:
      paths:
        - make.log
        - myFit.exe

# input_prod:
#     stage: prepare
#     tags:
#       - cvmfs
#     script:
#       - root -l -b -q CreateHistograms.C
#     artifacts:
#       paths:
#         - ExampleInputs

hstep:
    stage: hstep
    tags:
      - cvmfs
    script:
      - ./myFit.exe h config/myFit.config
    artifacts:
      paths:
        - FitExample

#
# myjob:
#   tags:
#   - cvmfs
#   script:
#   - whoami
#   - set +e
#   - source setup.sh


# image: docker.cern.ch/linuxsupport/cc7-base:latest
#
# stages:
#     - build
#     - cleanup
#
# before_script:
#    - yum -y install make
#    - ls
#    - which make
#
# build:
#     stage: build
#     tags:
#       - cvmfs
#     script:
#       - source setup.sh
#       - whoami
#       - make > make.log 2>&1
#       - make clean
#     artifacts:
#       paths:
#         - make.log


#
# image: docker.cern.ch/linuxsupport/cc7-base:latest
#
# tags:
#   - cvmfs
#
# script:
#   - whoami
#
# # stages is used to defined build stages that can be used by jobs. The ordering
# # of elements in stages defines the ordering of builds' execution:
# #       - builds of the same stage are run in parallel
# #       - builds of the next stage are run after success
# # stages:
# #     - build
# #     - cleanup
# #
# before_script:
#   - yum -y install make
#   - ls
#   - which make
#   - which root
#
# build_job:
#     stage: build
#     script:
#       - make > make.log 2>&1
#       - make clean
#     artifacts:
#       paths:
#         - make.log

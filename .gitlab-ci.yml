image: lukasheinrich/recast_cvmfs_assisted

##
## Various steps to be followed by the build
##
stages:
   - build
   - hstep
   - wstep
   - flsstep
   - draw
   - cleanup

##
## Common setup for all jobs
##
before_script:
  - set +e
  - source setup.sh #sources the setup IN the TREXfitter package (consistent with user's setup)
  - root -l -b -q

##
## "Prepare" step: first compiles the code
##    Artifact: keeps the log file of the compilation
##
compile:
   stage: build
   script:
     - make clean #make sure we don't have residual compilation results
     - make > make.log 2>&1 #dump the log files
   artifacts:
     paths:
       - make.log
       - myFit.exe

##
## "Prepare" step: in parallel, dumps the inputs of the test
##    Artifact: keeps the ExampleInputs folder
##
input_prod:
    stage: build
    script:
      - root -l -b -q CreateHistograms.C
      - ls -lrth ExampleInputs
    artifacts:
      paths:
        - ExampleInputs

##
## "Hstep" step: produces the TRExFitter
##    Artifact: keeps the FitExample folder
##
histograms:
    stage: hstep
    script:
      - ./myFit.exe h config/myFit.config
      - ls
      - ls FitExample/Histograms/
    artifacts:
      paths:
        - FitExample

##
## "Wsetp" step: produces the workspace
##    Artifact: keeps the FitExample folder
##
workspace:
    stage: wstep
    script:
      - ./myFit.exe w config/myFit.config | grep -v "TRExFitter" >& LOG_w
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/RooStats/
      - source test/scripts/check_step_w.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample

##
## "flsstep" step: performs the fit
##    Artifact: keeps the FitExample folder
##
fit:
    stage: flsstep
    script:
      - ./myFit.exe f config/myFit.config | grep -v "TRExFitter" >& LOG_f
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/Fits/
      - cat FitExample/Fits/*.txt
      - source test/scripts/check_step_f.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample

##
## "flsstep" step: compute the limits
##    Artifact: keeps the FitExample folder
##
limit:
    stage: flsstep
    script:
      - ./myFit.exe l config/myFit.config | grep -v "TRExFitter" >& LOG_l
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/Limits/
      - source test/scripts/check_step_l.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample

##
## "flsstep" step: compute the significance
##    Artifact: keeps the FitExample folder
##
significance:
    stage: flsstep
    script:
      - ./myFit.exe s config/myFit.config | grep -v "TRExFitter" >& LOG_s
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/Significance/
      - source test/scripts/check_step_s.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample

##
## "draw" step: performs the prefit plots
##    Artifact: keeps the Plots folder
##
draw_prefit:
    stage: draw
    script:
      - ./myFit.exe d config/myFit.config | grep -v "TRExFitter" >& LOG_d
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/Plots/
      - source test/scripts/check_step_d.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample/Plots/

##
## "draw" step: performs the postfit plots
##    Artifact: keeps the Plots folder
##
draw_postfit:
    stage: draw
    script:
      - ./myFit.exe p config/myFit.config | grep -v "TRExFitter" >& LOG_p
      - ls
      - set -e
      - ls FitExample
      - ls FitExample/Plots/
      - source test/scripts/check_step_p.sh
      - echo "=> Passed quick logfile checks"
    artifacts:
      paths:
        - FitExample/Plots/
